diff --git a/components/esp-tls/esp_tls.c b/components/esp-tls/esp_tls.c
index b3a6ae3..149b989 100644
--- a/components/esp-tls/esp_tls.c
+++ b/components/esp-tls/esp_tls.c
@@ -450,9 +450,21 @@ static esp_err_t set_client_config(const char *hostname, size_t hostlen, esp_tls
             ESP_LOGE(TAG, "Failed to set server pki context");
             return esp_ret;
         }
-    } else if (cfg->clientcert_pem_buf != NULL || cfg->clientkey_pem_buf != NULL) {
-        ESP_LOGE(TAG, "You have to provide both clientcert_pem_buf and clientkey_pem_buf for mutual authentication");
-        return ESP_ERR_INVALID_STATE;
+    } else if (cfg->clientcert_pem_buf != NULL) {
+        mbedtls_x509_crt_init(&tls->clientcert);
+        mbedtls_pk_init(&tls->clientkey);
+        ret = mbedtls_x509_crt_parse(&tls->clientcert, cfg->clientcert_pem_buf, cfg->clientcert_pem_bytes);
+        if (ret < 0) {
+            ESP_LOGE(TAG, "mbedtls_x509_crt_parse returned -0x%x\n\n", -ret);
+            ESP_LOG_BUFFER_HEX(TAG, cfg->clientcert_pem_buf, cfg->clientcert_pem_bytes);
+            return ESP_ERR_INVALID_STATE;
+        }
+        tls->clientkey = cfg->clientkey;
+        ret = mbedtls_ssl_conf_own_cert(&tls->conf, &tls->clientcert, &tls->clientkey);
+        if (ret < 0) {
+            ESP_LOGE(TAG, "mbedtls_ssl_conf_own_cert returned -0x%x\n\n", -ret);
+            return ESP_ERR_INVALID_STATE;
+        }
     }
     return ESP_OK;
 }
diff --git a/components/esp-tls/esp_tls.h b/components/esp-tls/esp_tls.h
index 6766cbd..743fe0b 100644
--- a/components/esp-tls/esp_tls.h
+++ b/components/esp-tls/esp_tls.h
@@ -108,6 +108,8 @@ typedef struct esp_tls_cfg {
     unsigned int clientkey_pem_bytes;       /*!< Size of client key pointed to by
                                                  clientkey_pem_buf */
 
+    mbedtls_pk_context clientkey;
+
     const unsigned char *clientkey_password;/*!< Client key decryption password string */
 
     unsigned int clientkey_password_len;    /*!< String length of the password pointed to by
